<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Monasca</title>
    <link>http://monasca.io/</link>
    <description>Recent content on Monasca</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Hewlett Packard Enterprise</copyright>
    <lastBuildDate>Fri, 07 Aug 2015 18:32:00 -0600</lastBuildDate>
    <atom:link href="http://monasca.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>alarms</title>
      <link>http://monasca.io/components/alarms/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/alarms/</guid>
      <description>&lt;p&gt;Included as part of Monasca is a real-time in-memory streaming thresholding engine capable of processing hundreds of thousands of metrics.&lt;br /&gt;
The &lt;a href=&#34;https://github.com/openstack/monasca-thresh&#34;&gt;threshold engine&lt;/a&gt; is based on &lt;a href=&#34;http://storm.apache.org/&#34;&gt;Apache Storm&lt;/a&gt; and written in Java.&lt;/p&gt;

&lt;p&gt;As metrics come into our system they are read from Kafka by the threshold engine then evaluated against any configured
&lt;a href=&#34;https://github.com/openstack/monasca-api/docs/monasca-api-spec.md#alarm-definitions-and-alarms&#34;&gt;alarm definitions&lt;/a&gt;. Alarms are created
automatically, evaluated and sent to the proper state as metrics flow through the system. When any alarm changes state an alarm-state-transition message
is added to Kafka so other processes can consume this event.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>metrics</title>
      <link>http://monasca.io/components/metrics/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/metrics/</guid>
      <description>

&lt;p&gt;Monasca provides an API for real-time storage and retrieval of metrics and statistics.  The main features of metrics are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage and retrieval of metrics.&lt;/li&gt;
&lt;li&gt;Push-based, streaming of metrics. Monasca support pushing metrics to the API, and does not support pull-based metrics.&lt;/li&gt;
&lt;li&gt;Query statistics about metrics, such as average, min, max, sum and count, over time ranges and periods.&lt;/li&gt;
&lt;li&gt;Multi-dimensional representation based on dimensions, (key, value) pairs to that data can be easily sliced and diced.&lt;/li&gt;
&lt;li&gt;Millisecond resolution.&lt;/li&gt;
&lt;li&gt;Meta data associated with metrics can be used to provide additional about metrics such as http status codes and error messages. For example, if Nagious plugins are run by the Monasca Agent, the resulting error description can be sent as meta data with the metric.&lt;/li&gt;
&lt;li&gt;Long data retention periods of metrics in their original fidelity, without lossy compression and rollups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;anatomy-of-a-metric:ad85a46ccb5d15dbaf3cad93f2560710&#34;&gt;Anatomy of a metric&lt;/h5&gt;

&lt;p&gt;A metric is a simple, concise, multi-dimensional and flexible description that consists of the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: A user-friendly name of the metric as a string.&lt;/li&gt;
&lt;li&gt;dimensions: A dictionary of user-defined (key, value) pairs that are used to uniquely identify a metric and can be used to filter and slice-and-dice metrics.&lt;/li&gt;
&lt;li&gt;timestamp: Time in milliseconds from the epoch.&lt;/li&gt;
&lt;li&gt;value: A float.&lt;/li&gt;
&lt;li&gt;value_meta: An optional dictionary of user-defined (key, value) pairs that can be used to describe a measurement. Value_meta is typically used to decribe status codes and error messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;example:ad85a46ccb5d15dbaf3cad93f2560710&#34;&gt;Example&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;    POST /v2.0/metrics
    {
	name: cpu.user_perc,
	dimensions: {
		hostname: hostname.domain.com,
		region: uswest,
		zone: 1,
		service: compute
	}
	timestamp: 0, /* milliseconds */
	value: 0.0,
	value_meta: {
		status_code: 400,
		msg: Internal server error
	}
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Agent&lt;/a&gt; documentation has more information on &lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/MonascaMetrics.md&#34;&gt;metrics.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://monasca.io/components/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://monasca.io/components/cli/</guid>
      <description>&lt;p&gt;++
Categories = [&amp;ldquo;components&amp;rdquo;]
date = &amp;ldquo;2015-08-19T15:19:37-06:00&amp;rdquo;
title = &amp;ldquo;cli&amp;rdquo;
weight = 10&lt;/p&gt;

&lt;p&gt;+++&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/python-monascaclient&#34;&gt;python-monascaclient&lt;/a&gt; is the Monasca CLI built in the same style as other OpenStack CLI&amp;rsquo;s.
The CLI provides commands for a full range of &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt; methods.&lt;/p&gt;

&lt;p&gt;Like most OpenStack CLI&amp;rsquo;s all that is needed to run it a keystone user, password and endpoint. These can be specified as arguments or using the standard
environment variables.&lt;/p&gt;

&lt;p&gt;In addition it can be used as a python module to provide a standard python interface for interacting with the &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt;.
It is used in this way by the &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Monasca Agent&lt;/a&gt; and so is installed wherever the agent is installed.&lt;/p&gt;

&lt;p&gt;Run the CLI with &lt;code&gt;-h&lt;/code&gt; or refer to the &lt;a href=&#34;https://github.com/openstack/python-monascaclient/blob/master/README.rst&#34;&gt;README&lt;/a&gt; for more
details on using the Monasca CLI.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://monasca.io/root/about/</link>
      <pubDate>Wed, 19 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/root/about/</guid>
      <description>

&lt;p&gt;Monasca is an OpenStack project that provides an open-source multi-tenant, highly scalable, performant, fault-tolerant monitoring-as-a-service solution.
Metrics can be published to the Monasca API, stored and queried.
Alarms can be created and notifications, such as email, can be sent when alarms transition state.
Support for complex event processing and logging is in progress.
Monasca builds an extensible platform for advanced monitoring services that can be used by both operators and tenants to gain operational insight and visibilty, ensuring availabilty and stability.&lt;/p&gt;

&lt;p&gt;More information on Monasca, including presentations at prior OpenStack conferences, can be found at the &lt;a href=&#34;https://wiki.openstack.org/wiki/Monasca&#34;&gt;Monasca WIKI&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;who-is-involved:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;who is involved?&lt;/h5&gt;

&lt;p&gt;The members of the Monasca team are primarily composed of companies, organizations and individuals involved in development and deployment of OpenStack.&lt;/p&gt;

&lt;p&gt;Some of the major companies involved with developing and/or deploying Monasca include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hewlett Packard Enterprise&lt;/li&gt;
&lt;li&gt;Time Warner Cable (TWC)&lt;/li&gt;
&lt;li&gt;Fujitsu&lt;/li&gt;
&lt;li&gt;Cisco&lt;/li&gt;
&lt;li&gt;Cray&lt;/li&gt;
&lt;li&gt;Rackspace&lt;/li&gt;
&lt;li&gt;SAP&lt;/li&gt;
&lt;li&gt;NEC&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;technologies:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;technologies&lt;/h5&gt;

&lt;p&gt;Monasca is written in both Java and Python. Several of the components in Monasca started out in Java. However, the go-forward language for Monasca is Python.&lt;/p&gt;

&lt;p&gt;Monasca is built on several open-source technologies including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openstack.org&#34;&gt;OpenStack&lt;/a&gt;: Monasca uses the &lt;a href=&#34;http://docs.openstack.org/developer/keystone/&#34;&gt;Keystone&lt;/a&gt; OpenStack Identity Service for authentication, authorization and multi-tenancy. Monasca integrates with several other OpenStack services such as &lt;a href=&#34;http://docs.openstack.org/developer/heat/&#34;&gt;Heat&lt;/a&gt; for auto-scaling and &lt;a href=&#34;http://docs.openstack.org/developer/ceilometer/&#34;&gt;Ceilometer&lt;/a&gt; for monitoring OpenStack resources. Integrations with additional OpenStack services will be targeted in the future.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Apache Kafka&lt;/a&gt;: A high-throughput distributed messaging system. Kafka is a central component in Monasca and provides the infranstructure for all internal communications between components.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://storm.apache.org/&#34;&gt;Apache Storm&lt;/a&gt;: A free and open source distributed realtime computation system. Apache Storm is used in the Monasca Threshold Engine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;Apache ZooKeeper&lt;/a&gt;: Used by Kafka and Storm.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://influxdb.com/&#34;&gt;InfluxDB&lt;/a&gt;: An open-source distributed time series database with no external dependencies. InfluxDB is one of the supported databases for storing metrics and alarm history.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;: A freely available open source Relational Database Management System (RDBMS) that uses Structured Query Language (SQL). SQL is the most popular language for adding, accessing and managing content in a database. It is most noted for its quick processing, proven reliability, ease and flexibility of use. MySQL is one of the supported databases for the Monasca Config Database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grafana.org&#34;&gt;Grafana&lt;/a&gt;: An open source, feature rich metrics dashboard and graph editor. Support for Monasca as a data source in Grafana has been added.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, Monasca optionally supports the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vertica.com/&#34;&gt;HP Vertica&lt;/a&gt;: HP Vertica delivers the most advanced SQL analytics as a standards-based relational database with full support for SQL, JDBC, and ODBC. Vertica is one of the supported databases for storing metrics and alarm history within Monasca.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;licensing:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;licensing&lt;/h5&gt;

&lt;p&gt;Monasca has been developed under an &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0 license&lt;/a&gt; and has no restrictions on distribution or deployment.&lt;/p&gt;

&lt;h5 id=&#34;acknowledgments:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;acknowledgments&lt;/h5&gt;

&lt;p&gt;Monasca uses the &lt;a href=&#34;https://www.yourkit.com/&#34;&gt;YourKit Java Profiler&lt;/a&gt; for Java development and performance analysis.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.yourkit.com/&#34;&gt;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; alt=&#34;Alt text&#34; title=&#34;YourKit&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Common Errors</title>
      <link>http://monasca.io/operations/errors/</link>
      <pubDate>Wed, 19 Aug 2015 10:12:42 -0600</pubDate>
      
      <guid>http://monasca.io/operations/errors/</guid>
      <description>

&lt;p&gt;Common errors, their likely cause and solution.&lt;/p&gt;

&lt;h4 id=&#34;api-errors:8f8a0b09fa5f199438dd9e7557ce36db&#34;&gt;API Errors&lt;/h4&gt;

&lt;h4 id=&#34;agent-errors:8f8a0b09fa5f199438dd9e7557ce36db&#34;&gt;Agent Errors&lt;/h4&gt;

&lt;h4 id=&#34;cli-errors:8f8a0b09fa5f199438dd9e7557ce36db&#34;&gt;CLI Errors&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>features</title>
      <link>http://monasca.io/root/features/</link>
      <pubDate>Fri, 21 Aug 2015 09:04:14 -0600</pubDate>
      
      <guid>http://monasca.io/root/features/</guid>
      <description>&lt;p&gt;Monasca is designed to monitor a modern cloud infrastructure which is dynamic and large, these features have been designed with that in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt; is a REST API used for all interaction with the server stack providing easy extensibility.&lt;/li&gt;
&lt;li&gt;All components in the system are designed for High Availability and Scale. Each component can be horizontally scaled as needed and our components
are highly performant. Most notably our use of &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, the &lt;a href=&#34;http://monasca.io/components/persister/&#34;&gt;Monasca persister&lt;/a&gt; and our use of
a dedicated &lt;a href=&#34;http://monasca.io/components/metrics_db/&#34;&gt;metrics DB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Our system can dynamically handle infrastructure changes. There is no need to pre-register metrics before submitting,
&lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md#alarm-definitions-and-alarms&#34;&gt;alarm definitions&lt;/a&gt; provide dynamic alarm
creation based on the metrics being received and dimensions in our &lt;a href=&#34;http://monasca.io/components/metrics&#34;&gt;metrics&lt;/a&gt; provide a rich way to identify components and infrastructure.&lt;/li&gt;
&lt;li&gt;Monasca is Multi-tenant and authenticated. Metrics are submitted and authenticated using &lt;a href=&#34;http://docs.openstack.org/developer/keystone/&#34;&gt;Keystone&lt;/a&gt;
and stored associated with a tenant ID. This enables not only Operator monitoring but also Monitoring as a Service use cases.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Monasca agent&lt;/a&gt; is highly extensible with out of the box support for monitoring of many services as well as supporting
existing Nagios checks and statsd metrics.&lt;/li&gt;
&lt;li&gt;Our system is fully open source under the Apache license.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://monasca.io/components/notifications/&#34;&gt;Notifications&lt;/a&gt; can be sent using a variety of methods including email, pagerduty and generic webhooks for integrating
with other systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://monasca.io/components/alarms/&#34;&gt;Thresholding on alarming&lt;/a&gt; on metrics is done real-time with compound alarms described using a simple expressive grammar
composed of alarm sub-expressions and logical operators.&lt;/li&gt;
&lt;li&gt;The overall architecture is a micro-services based bus architecture that allows for &lt;a href=&#34;http://monasca.io/root/coming-soon&#34;&gt;easy extensibility&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>api</title>
      <link>http://monasca.io/components/api/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/api/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/openstack/monasca-api/&#34;&gt;Monasca API&lt;/a&gt; is built on a first-class RESTful API that provides authentication and multi-tenancy.  Monasca integrates with the OpenStack Keystone Identity service.&lt;/p&gt;

&lt;p&gt;Monasca supports the following main resources in the API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /v2.0/versions: Supplies operations for accessing information about supported versions of the API.&lt;/li&gt;
&lt;li&gt;GET, POST /v2.0/metrics: Allows metrics to be created and queried.&lt;/li&gt;
&lt;li&gt;GET /v2.0/metrics/names: Operations for accessing names of metrics.&lt;/li&gt;
&lt;li&gt;GET /v2.0/metrics/measurements: Operations for accessing measurements of metrics.&lt;/li&gt;
&lt;li&gt;GET /v2.0/metrics/statistics: Operations for calculating statistics of metrics&lt;/li&gt;
&lt;li&gt;GET, POST, PUT, PATH, DELETE /v2.0/alarm-definitions: Operations for working with alarm definitions.&lt;/li&gt;
&lt;li&gt;GET, PUT, DELETE /v2.0/alarms: Operations for working with alarms.&lt;/li&gt;
&lt;li&gt;GET /v2.0/alarms/state-history: List alarm state history for alarms.&lt;/li&gt;
&lt;li&gt;GET, POST, PUT, DELETE /v2.0/notification-methods: Operations for working with notification methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md&#34;&gt;full API spec&lt;/a&gt; for more info.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>deployment</title>
      <link>http://monasca.io/operations/deployment/</link>
      <pubDate>Tue, 18 Aug 2015 17:09:52 -0600</pubDate>
      
      <guid>http://monasca.io/operations/deployment/</guid>
      <description>&lt;p&gt;Monasca is a system built for large scale deployments. One side effect of this is there are many components in the system each of which is an
installation in and of itself. The end result of this is that I highly recommend you use a configuration management system to install Monasca.&lt;/p&gt;

&lt;p&gt;The HP Monasca team has published a set of &lt;a href=&#34;http://www.ansible.com/home&#34;&gt;Ansible&lt;/a&gt; roles that can be used to install and configure Monasca on
Debian/Ubuntu based machines. These roles all are in repos that start with &amp;lsquo;ansible-&amp;rsquo; and are available on github under the
&lt;a href=&#34;https://github.com/hpcloud-mon?utf8=%E2%9C%93&amp;amp;query=ansible-&#34;&gt;hpcloud-mon organization&lt;/a&gt;. These roles are used in the &lt;a href=&#34;http://monasca.io/dev/vagrant/&#34;&gt;Monasca Vagrant&lt;/a&gt;
development environment but are also used internally at HP for full HA installations of Monasca.&lt;/p&gt;

&lt;p&gt;In addition to the Ansible roles a &lt;a href=&#34;https://puppetlabs.com/&#34;&gt;Puppet&lt;/a&gt; module is maintained by the Monasca community in the
&lt;a href=&#34;https://github.com/openstack/puppet-monasca&#34;&gt;puppet-monasca&lt;/a&gt; git repository.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>architecture</title>
      <link>http://monasca.io/root/architecture/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/root/architecture/</guid>
      <description>

&lt;p&gt;Monasca is a highly performant, scalable, fault-tolerant and extensible micro-services messages bus based architecture.
It uses a REST API for high-speed metrics processing and querying and has a streaming alarm engine and notification engine.
All of the major components communicate using &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;.
Every component in the system is built with High Availability (HA) in mind and can be scaled either horizontally or vertically to allow for monitoring of very large systems.
&lt;img src=&#34;http://monasca.io/img/architecture/metrics-architecture.png&#34; alt=&#34;Monasca Metrics Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;metrics:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;metrics&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt; is the gateway for all interaction with Monasca. In a typical scenario &lt;a href=&#34;http://monasca.io/components/metrics&#34;&gt;metrics&lt;/a&gt;
are collected by the &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Monasca Agent&lt;/a&gt; running on a system and sent to the Monasca API.
The API then publishes the metrics to the Kafka queue.
From here the &lt;a href=&#34;http://monasca.io/components/persister/&#34;&gt;Monasca Persister&lt;/a&gt; consumes metrics and writes them to our &lt;a href=&#34;http://monasca.io/components/metrics_db/&#34;&gt;Metrics database&lt;/a&gt;.
The &lt;a href=&#34;http://monasca.io/components/alarms/&#34;&gt;Monasca Threshold Engine&lt;/a&gt; also consumes the metrics and uses them to evaluate &lt;a href=&#34;http://monasca.io/components/alarms/&#34;&gt;alarms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point the metrics are in our system and can be be queried using the Monasca API, either directly or through one of our other components, such as the Horizon plugin or the &lt;a href=&#34;http://monasca.io/components/cli&#34;&gt;Monasca CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the Threshold Engine evaluates the metrics against the alarms it can create alarm state transition events.
These are published back to Kafka and are read by both the persister and &lt;a href=&#34;http://monasca.io/components/notifications/&#34;&gt;Notification Engine&lt;/a&gt;.
The Persister writes the alarm transitions to the DB for future retrieval.
The notification engine will send a notification of the configured type for appropriate state transitions.&lt;/p&gt;

&lt;p&gt;In addition to the components discussed above we also have a configuration database used for storing information such as alarm definitions and notification methods.
This database can be either MySQL or PostgreSQL.&lt;/p&gt;

&lt;h4 id=&#34;complex-event-processing-cep:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;complex event processing (CEP)&lt;/h4&gt;

&lt;p&gt;Support for Complex Event Processing (CEP) is in process.
There are three additional components that will be added for events processing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;monasca-events-api&lt;/li&gt;
&lt;li&gt;monasca-events-transform&lt;/li&gt;
&lt;li&gt;monasca-events-engine&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/events-architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;log-processing:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;log processing&lt;/h4&gt;

&lt;p&gt;Support for Log processing is in progress and includes the following components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Monasca Log API (monasca-log-api)&lt;/li&gt;
&lt;li&gt;Monasca Log Parser (monasca-log-parser)&lt;/li&gt;
&lt;li&gt;Monasca Log Persister (monasca-log-persister)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/log-architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;combined-architecture:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;combined architecture&lt;/h4&gt;

&lt;p&gt;One of the goals of Monasca is to provide a single unified service for metrics, events and log processing.
The overall combined Monasca architecture can be shown as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/combined-architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;future-extensions:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;future extensions&lt;/h4&gt;

&lt;p&gt;In addition, to the event and log processing systems a proof-of-concept had been developed for anomaly detection and metrics transform and aggregation engine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>notifications</title>
      <link>http://monasca.io/components/notifications/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/notifications/</guid>
      <description>&lt;p&gt;Notifications can be sent when alarm state transition occurs.  Monasca supports an integrated
&lt;a href=&#34;https://github.com/openstack/monasca-notification&#34;&gt;notification engine&lt;/a&gt; that can send various notification types.
&lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md#alarm-definitions-and-alarms&#34;&gt;Alarm Definitions&lt;/a&gt; can be associated
with &lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md#notification-methods&#34;&gt;notification methods&lt;/a&gt; for
transitions to the states, OK, Alarm or Undetermined.&lt;/p&gt;

&lt;p&gt;Notification methods of the following types are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;PagerDuty&lt;/li&gt;
&lt;li&gt;Webhooks&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>dev</title>
      <link>http://monasca.io/root/dev/</link>
      <pubDate>Tue, 18 Aug 2015 17:04:58 -0600</pubDate>
      
      <guid>http://monasca.io/root/dev/</guid>
      <description>

&lt;p&gt;Monasca is an active OpenStack project and welcomes new developers.&lt;/p&gt;

&lt;h4 id=&#34;openstack-community:9ebf8dc1d918e9d82885a54b6ce06af5&#34;&gt;OpenStack Community&lt;/h4&gt;

&lt;p&gt;Monasca was formally accepted as an official OpenStack project in November, 2015 (&lt;a href=&#34;https://review.openstack.org/#/c/213183/&#34;&gt;https://review.openstack.org/#/c/213183/&lt;/a&gt;) and follows the OpenStack
&lt;a href=&#34;https://wiki.openstack.org/wiki/How_To_Contribute&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;http://docs.openstack.org/developer/hacking/&#34;&gt;code standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our project has a &lt;a href=&#34;https://launchpad.net/monasca&#34;&gt;launchpad site&lt;/a&gt; which is used for bug tracking. The project mailing list is also hosted on launchpad,
see the &lt;a href=&#34;https://launchpad.net/~monasca&#34;&gt;team page&lt;/a&gt; for details on that.&lt;/p&gt;

&lt;p&gt;Monasca hosts weekly meetings as well as other venues such as mid-cycle meetups and OpenStack Summits. Details on the team meetings can be found at &lt;a href=&#34;http://eavesdrop.openstack.org/#Monasca_Team_Meeting]&#34;&gt;Monasca Weekly Meeting&lt;/a&gt; and the &lt;a href=&#34;https://wiki.openstack.org/wiki/Meetings/Monasca&#34;&gt;Monasca Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;code-contributions:9ebf8dc1d918e9d82885a54b6ce06af5&#34;&gt;Code Contributions&lt;/h4&gt;

&lt;p&gt;Monasca is hosted in github in the openstack organization and can be found &lt;a href=&#34;https://github.com/openstack?query=monasca&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://monasca.io/dev/vagrant/&#34;&gt;Monasca Vagrant&lt;/a&gt; environment is the primary setup used for development of Monasca. More information on testing Monasca can be found
at our &lt;a href=&#34;http://monasca.io/dev/testing/&#34;&gt;testing page&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>agent</title>
      <link>http://monasca.io/components/agent/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/agent/</guid>
      <description>&lt;p&gt;Monasca supports an optional monitoring &lt;a href=&#34;https://github.com/openstack/monasca-agent&#34;&gt;agent&lt;/a&gt; that is written in Python.
The Agent is a Python program that runs on systems and runs various checks then sends the data on to the &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt;.
Checks the Agent can run include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;System metrics: cpu, memory, network, disk and file-system utilization.&lt;/li&gt;
&lt;li&gt;Service metrics: The agent supports plugins such as MySQL, RabbitMQ, Kafka, and many others.&lt;/li&gt;
&lt;li&gt;Statsd: Statsd metrics can be sent locally to the agent which will format and send on to the Monasca API.&lt;/li&gt;
&lt;li&gt;Nagios: The Agent can run any Nagios check and convert the results to a metric and send to the Monasca API. Status code and messages are sent as &amp;lsquo;value_meta&amp;rdquo; in the metric.&lt;/li&gt;
&lt;li&gt;Check_mk: Similar to Nagios checks the Agent can run check_mk checks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details on the Agent can be found at these pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/Agent.md&#34;&gt;Architecture and Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/Plugins.md&#34;&gt;Agent Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/Customizations.md&#34;&gt;Customizing the Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/MonascaMetrics.md&#34;&gt;Metrics and the Agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>coming soon</title>
      <link>http://monasca.io/root/coming-soon/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/root/coming-soon/</guid>
      <description>&lt;p&gt;Monasca will be adding support for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logging: In the style of Loggly, support for an authenticated multi-tenant logging solution is in progress.&lt;/li&gt;
&lt;li&gt;Complex Event Processing:&lt;/li&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;Ceilosca, integration with Ceilometer and Monasca.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>metrics_db</title>
      <link>http://monasca.io/components/metrics_db/</link>
      <pubDate>Wed, 19 Aug 2015 15:23:18 -0600</pubDate>
      
      <guid>http://monasca.io/components/metrics_db/</guid>
      <description>&lt;p&gt;Metrics and alarm state transitions are persisted to a Metrics DB from which they can be retrieved at any time.
As Monasca is built for scale a specific database that can handle the high metrics load is needed for this use case.&lt;/p&gt;

&lt;p&gt;Monasca supports two different metrics databases, &lt;a href=&#34;http://www.vertica.com/&#34;&gt;Vertica&lt;/a&gt; and &lt;a href=&#34;https://influxdb.com/&#34;&gt;InfluxDB&lt;/a&gt;. The two components
that interact with the Metrics DB are the &lt;a href=&#34;http://monasca.io/components/persister/&#34;&gt;persister&lt;/a&gt; and the &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;API&lt;/a&gt;. These can both be configured to
use either database.&lt;/p&gt;

&lt;p&gt;For both databases the schema used is found in the &lt;a href=&#34;http://www.ansible.com/home&#34;&gt;Ansible&lt;/a&gt; role, &lt;a href=&#34;https://github.com/hpcloud-mon/ansible-monasca-schema&#34;&gt;monasca-schema&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>persister</title>
      <link>http://monasca.io/components/persister/</link>
      <pubDate>Wed, 19 Aug 2015 15:23:05 -0600</pubDate>
      
      <guid>http://monasca.io/components/persister/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/openstack/monasca-persister&#34;&gt;Monasca persister&lt;/a&gt; is responsible for reading metrics and alarm state transitions from
&lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; and writing to the &lt;a href=&#34;http://monasca.io/components/metrics_db/&#34;&gt;metrics DB&lt;/a&gt;. Though this is a relatively simple task it must
be done reliably at high speed with HA.&lt;/p&gt;

&lt;p&gt;Multiple persisters can run simultaneously utilizing different partitions within a Kafka topic to share the
load between all instances. As instances drop off or come up the load is rebalanced between all available persisters.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>