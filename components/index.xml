<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Components on Monasca</title>
    <link>http://monasca.io/components/</link>
    <description>Recent content in Components on Monasca</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Hewlett Packard Enterprise</copyright>
    <lastBuildDate>Fri, 07 Aug 2015 18:32:00 -0600</lastBuildDate>
    <atom:link href="http://monasca.io/components/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>alarms</title>
      <link>http://monasca.io/components/alarms/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/alarms/</guid>
      <description>&lt;p&gt;Included as part of Monasca is a real-time in-memory streaming thresholding engine capable of processing hundreds of thousands of metrics.&lt;br /&gt;
The &lt;a href=&#34;https://github.com/openstack/monasca-thresh&#34;&gt;threshold engine&lt;/a&gt; is based on &lt;a href=&#34;http://storm.apache.org/&#34;&gt;Apache Storm&lt;/a&gt; and written in Java.&lt;/p&gt;

&lt;p&gt;As metrics come into our system they are read from Kafka by the threshold engine then evaluated against any configured
&lt;a href=&#34;https://github.com/openstack/monasca-api/docs/monasca-api-spec.md#alarm-definitions-and-alarms&#34;&gt;alarm definitions&lt;/a&gt;. Alarms are created
automatically, evaluated and sent to the proper state as metrics flow through the system. When any alarm changes state an alarm-state-transition message
is added to Kafka so other processes can consume this event.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>metrics</title>
      <link>http://monasca.io/components/metrics/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/metrics/</guid>
      <description>

&lt;p&gt;Monasca provides an API for real-time storage and retrieval of metrics and statistics.  The main features of metrics are as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Storage and retrieval of metrics.&lt;/li&gt;
&lt;li&gt;Push-based, streaming of metrics. Monasca support pushing metrics to the API, and does not support pull-based metrics.&lt;/li&gt;
&lt;li&gt;Query statistics about metrics, such as average, min, max, sum and count, over time ranges and periods.&lt;/li&gt;
&lt;li&gt;Multi-dimensional representation based on dimensions, (key, value) pairs to that data can be easily sliced and diced.&lt;/li&gt;
&lt;li&gt;Millisecond resolution.&lt;/li&gt;
&lt;li&gt;Meta data associated with metrics can be used to provide additional about metrics such as http status codes and error messages. For example, if Nagious plugins are run by the Monasca Agent, the resulting error description can be sent as meta data with the metric.&lt;/li&gt;
&lt;li&gt;Long data retention periods of metrics in their original fidelity, without lossy compression and rollups.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;anatomy-of-a-metric:ad85a46ccb5d15dbaf3cad93f2560710&#34;&gt;Anatomy of a metric&lt;/h5&gt;

&lt;p&gt;A metric is a simple, concise, multi-dimensional and flexible description that consists of the following fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;name: A user-friendly name of the metric as a string.&lt;/li&gt;
&lt;li&gt;dimensions: A dictionary of user-defined (key, value) pairs that are used to uniquely identify a metric and can be used to filter and slice-and-dice metrics.&lt;/li&gt;
&lt;li&gt;timestamp: Time in milliseconds from the epoch.&lt;/li&gt;
&lt;li&gt;value: A float.&lt;/li&gt;
&lt;li&gt;value_meta: An optional dictionary of user-defined (key, value) pairs that can be used to describe a measurement. Value_meta is typically used to decribe status codes and error messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;example:ad85a46ccb5d15dbaf3cad93f2560710&#34;&gt;Example&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;    POST /v2.0/metrics
    {
	name: cpu.user_perc,
	dimensions: {
		hostname: hostname.domain.com,
		region: uswest,
		zone: 1,
		service: compute
	}
	timestamp: 0, /* milliseconds */
	value: 0.0,
	value_meta: {
		status_code: 400,
		msg: Internal server error
	}
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Agent&lt;/a&gt; documentation has more information on &lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/MonascaMetrics.md&#34;&gt;metrics.&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>api</title>
      <link>http://monasca.io/components/api/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/api/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/openstack/monasca-api/&#34;&gt;Monasca API&lt;/a&gt; is built on a first-class RESTful API that provides authentication and multi-tenancy.  Monasca integrates with the OpenStack Keystone Identity service.&lt;/p&gt;

&lt;p&gt;Monasca supports the following main resources in the API:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /v2.0/versions: Supplies operations for accessing information about supported versions of the API.&lt;/li&gt;
&lt;li&gt;GET, POST /v2.0/metrics: Allows metrics to be created and queried.&lt;/li&gt;
&lt;li&gt;GET /v2.0/metrics/names: Operations for accessing names of metrics.&lt;/li&gt;
&lt;li&gt;GET /v2.0/metrics/measurements: Operations for accessing measurements of metrics.&lt;/li&gt;
&lt;li&gt;GET /v2.0/metrics/statistics: Operations for calculating statistics of metrics&lt;/li&gt;
&lt;li&gt;GET, POST, PUT, PATH, DELETE /v2.0/alarm-definitions: Operations for working with alarm definitions.&lt;/li&gt;
&lt;li&gt;GET, PUT, DELETE /v2.0/alarms: Operations for working with alarms.&lt;/li&gt;
&lt;li&gt;GET /v2.0/alarms/state-history: List alarm state history for alarms.&lt;/li&gt;
&lt;li&gt;GET, POST, PUT, DELETE /v2.0/notification-methods: Operations for working with notification methods.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md&#34;&gt;full API spec&lt;/a&gt; for more info.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>notifications</title>
      <link>http://monasca.io/components/notifications/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/notifications/</guid>
      <description>&lt;p&gt;Notifications can be sent when alarm state transition occurs.  Monasca supports an integrated
&lt;a href=&#34;https://github.com/openstack/monasca-notification&#34;&gt;notification engine&lt;/a&gt; that can send various notification types.
&lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md#alarm-definitions-and-alarms&#34;&gt;Alarm Definitions&lt;/a&gt; can be associated
with &lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md#notification-methods&#34;&gt;notification methods&lt;/a&gt; for
transitions to the states, OK, Alarm or Undetermined.&lt;/p&gt;

&lt;p&gt;Notification methods of the following types are supported:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Email&lt;/li&gt;
&lt;li&gt;PagerDuty&lt;/li&gt;
&lt;li&gt;Webhooks&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>agent</title>
      <link>http://monasca.io/components/agent/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/components/agent/</guid>
      <description>&lt;p&gt;Monasca supports an optional monitoring &lt;a href=&#34;https://github.com/openstack/monasca-agent&#34;&gt;agent&lt;/a&gt; that is written in Python.
The Agent is a Python program that runs on systems and runs various checks then sends the data on to the &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt;.
Checks the Agent can run include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;System metrics: cpu, memory, network, disk and file-system utilization.&lt;/li&gt;
&lt;li&gt;Service metrics: The agent supports plugins such as MySQL, RabbitMQ, Kafka, and many others.&lt;/li&gt;
&lt;li&gt;Statsd: Statsd metrics can be sent locally to the agent which will format and send on to the Monasca API.&lt;/li&gt;
&lt;li&gt;Nagios: The Agent can run any Nagios check and convert the results to a metric and send to the Monasca API. Status code and messages are sent as &amp;lsquo;value_meta&amp;rdquo; in the metric.&lt;/li&gt;
&lt;li&gt;Check_mk: Similar to Nagios checks the Agent can run check_mk checks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details on the Agent can be found at these pages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/Agent.md&#34;&gt;Architecture and Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/Plugins.md&#34;&gt;Agent Plugins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/Customizations.md&#34;&gt;Customizing the Agent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openstack/monasca-agent/blob/master/docs/MonascaMetrics.md&#34;&gt;Metrics and the Agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>metrics_db</title>
      <link>http://monasca.io/components/metrics_db/</link>
      <pubDate>Wed, 19 Aug 2015 15:23:18 -0600</pubDate>
      
      <guid>http://monasca.io/components/metrics_db/</guid>
      <description>&lt;p&gt;Metrics and alarm state transitions are persisted to a Metrics DB from which they can be retrieved at any time.
As Monasca is built for scale a specific database that can handle the high metrics load is needed for this use case.&lt;/p&gt;

&lt;p&gt;Monasca supports two different metrics databases, &lt;a href=&#34;http://www.vertica.com/&#34;&gt;Vertica&lt;/a&gt; and &lt;a href=&#34;https://influxdb.com/&#34;&gt;InfluxDB&lt;/a&gt;. The two components
that interact with the Metrics DB are the &lt;a href=&#34;http://monasca.io/components/persister/&#34;&gt;persister&lt;/a&gt; and the &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;API&lt;/a&gt;. These can both be configured to
use either database.&lt;/p&gt;

&lt;p&gt;For both databases the schema used is found in the &lt;a href=&#34;http://www.ansible.com/home&#34;&gt;Ansible&lt;/a&gt; role, &lt;a href=&#34;https://github.com/hpcloud-mon/ansible-monasca-schema&#34;&gt;monasca-schema&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>persister</title>
      <link>http://monasca.io/components/persister/</link>
      <pubDate>Wed, 19 Aug 2015 15:23:05 -0600</pubDate>
      
      <guid>http://monasca.io/components/persister/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;https://github.com/openstack/monasca-persister&#34;&gt;Monasca persister&lt;/a&gt; is responsible for reading metrics and alarm state transitions from
&lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt; and writing to the &lt;a href=&#34;http://monasca.io/components/metrics_db/&#34;&gt;metrics DB&lt;/a&gt;. Though this is a relatively simple task it must
be done reliably at high speed with HA.&lt;/p&gt;

&lt;p&gt;Multiple persisters can run simultaneously utilizing different partitions within a Kafka topic to share the
load between all instances. As instances drop off or come up the load is rebalanced between all available persisters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>cli</title>
      <link>http://monasca.io/components/cli/</link>
      <pubDate>Wed, 19 Aug 2015 15:19:37 -0600</pubDate>
      
      <guid>http://monasca.io/components/cli/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/openstack/python-monascaclient&#34;&gt;python-monascaclient&lt;/a&gt; is the Monasca CLI built in the same style as other OpenStack CLI&amp;rsquo;s.
The CLI provides commands for a full range of &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt; methods.&lt;/p&gt;

&lt;p&gt;Like most OpenStack CLI&amp;rsquo;s all that is needed to run it a keystone user, password and endpoint. These can be specified as arguments or using the standard
environment variables.&lt;/p&gt;

&lt;p&gt;In addition it can be used as a python module to provide a standard python interface for interacting with the &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt;.
It is used in this way by the &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Monasca Agent&lt;/a&gt; and so is installed wherever the agent is installed.&lt;/p&gt;

&lt;p&gt;Run the CLI with &lt;code&gt;-h&lt;/code&gt; or refer to the &lt;a href=&#34;https://github.com/openstack/python-monascaclient/blob/master/README.rst&#34;&gt;README&lt;/a&gt; for more
details on using the Monasca CLI.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>