<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Roots on Monasca</title>
    <link>http://monasca.io/root/</link>
    <description>Recent content in Roots on Monasca</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© 2015 Hewlett Packard Enterprise</copyright>
    <lastBuildDate>Wed, 19 Aug 2015 18:32:00 -0600</lastBuildDate>
    <atom:link href="http://monasca.io/root/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>about</title>
      <link>http://monasca.io/root/about/</link>
      <pubDate>Wed, 19 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/root/about/</guid>
      <description>

&lt;p&gt;Monasca is an OpenStack project that provides an open-source multi-tenant, highly scalable, performant, fault-tolerant monitoring-as-a-service solution.
Metrics can be published to the Monasca API, stored and queried.
Alarms can be created and notifications, such as email, can be sent when alarms transition state.
Support for complex event processing and logging is in progress.
Monasca builds an extensible platform for advanced monitoring services that can be used by both operators and tenants to gain operational insight and visibilty, ensuring availabilty and stability.&lt;/p&gt;

&lt;p&gt;More information on Monasca, including presentations at prior OpenStack conferences, can be found at the &lt;a href=&#34;https://wiki.openstack.org/wiki/Monasca&#34;&gt;Monasca Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h5 id=&#34;who-is-involved:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;who is involved?&lt;/h5&gt;

&lt;p&gt;The members of the Monasca team are primarily composed of companies, organizations and individuals involved in development and deployment of OpenStack.&lt;/p&gt;

&lt;p&gt;Some of the major companies involved with developing and/or deploying Monasca include the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Hewlett Packard Enterprise&lt;/li&gt;
&lt;li&gt;Time Warner Cable (TWC)&lt;/li&gt;
&lt;li&gt;Fujitsu&lt;/li&gt;
&lt;li&gt;Cisco&lt;/li&gt;
&lt;li&gt;Cray&lt;/li&gt;
&lt;li&gt;Rackspace&lt;/li&gt;
&lt;li&gt;SAP&lt;/li&gt;
&lt;li&gt;NEC&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;technologies:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;technologies&lt;/h5&gt;

&lt;p&gt;Monasca is written in both Java and Python. Several of the components in Monasca started out in Java. However, the go-forward language for Monasca is Python.&lt;/p&gt;

&lt;p&gt;Monasca is built on several open-source technologies including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openstack.org&#34;&gt;OpenStack&lt;/a&gt;: Monasca uses the &lt;a href=&#34;http://docs.openstack.org/developer/keystone/&#34;&gt;Keystone&lt;/a&gt; OpenStack Identity Service for authentication, authorization and multi-tenancy. Monasca integrates with several other OpenStack services such as &lt;a href=&#34;http://docs.openstack.org/developer/heat/&#34;&gt;Heat&lt;/a&gt; for auto-scaling and &lt;a href=&#34;http://docs.openstack.org/developer/ceilometer/&#34;&gt;Ceilometer&lt;/a&gt; for monitoring OpenStack resources. Integrations with additional OpenStack services will be targeted in the future.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kafka.apache.org/&#34;&gt;Apache Kafka&lt;/a&gt;: A high-throughput distributed messaging system. Kafka is a central component in Monasca and provides the infranstructure for all internal communications between components.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://storm.apache.org/&#34;&gt;Apache Storm&lt;/a&gt;: A free and open source distributed realtime computation system. Apache Storm is used in the Monasca Threshold Engine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;Apache ZooKeeper&lt;/a&gt;: Used by Kafka and Storm.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://influxdb.com/&#34;&gt;InfluxDB&lt;/a&gt;: An open-source distributed time series database with no external dependencies. InfluxDB is one of the supported databases for storing metrics and alarm history.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySQL&lt;/a&gt;: A freely available open source Relational Database Management System (RDBMS) that uses Structured Query Language (SQL). SQL is the most popular language for adding, accessing and managing content in a database. It is most noted for its quick processing, proven reliability, ease and flexibility of use. MySQL is one of the supported databases for the Monasca Config Database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grafana.org&#34;&gt;Grafana&lt;/a&gt;: An open source, feature rich metrics dashboard and graph editor. Support for Monasca as a data source in Grafana has been added.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, Monasca optionally supports the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vertica.com/&#34;&gt;HP Vertica&lt;/a&gt;: HP Vertica delivers the most advanced SQL analytics as a standards-based relational database with full support for SQL, JDBC, and ODBC. Vertica is one of the supported databases for storing metrics and alarm history within Monasca.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;licensing:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;licensing&lt;/h5&gt;

&lt;p&gt;Monasca has been developed under an &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0 license&lt;/a&gt; and has no restrictions on distribution or deployment.&lt;/p&gt;

&lt;h5 id=&#34;acknowledgments:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;acknowledgments&lt;/h5&gt;

&lt;p&gt;Monasca uses the &lt;a href=&#34;https://www.yourkit.com/&#34;&gt;YourKit Java Profiler&lt;/a&gt; for Java development and performance analysis.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.yourkit.com/&#34;&gt;&lt;img src=&#34;https://www.yourkit.com/images/yklogo.png&#34; alt=&#34;Alt text&#34; title=&#34;YourKit&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>features</title>
      <link>http://monasca.io/root/features/</link>
      <pubDate>Fri, 21 Aug 2015 09:04:14 -0600</pubDate>
      
      <guid>http://monasca.io/root/features/</guid>
      <description>&lt;p&gt;Monasca is designed to monitor a modern cloud infrastructure which is dynamic and large, these features have been designed with that in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt; is a REST API used for all interaction with the server stack providing easy extensibility.&lt;/li&gt;
&lt;li&gt;All components in the system are designed for High Availability and Scale. Each component can be horizontally scaled as needed and our components
are highly performant. Most notably our use of &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, the &lt;a href=&#34;http://monasca.io/components/persister/&#34;&gt;Monasca persister&lt;/a&gt; and our use of
a dedicated &lt;a href=&#34;http://monasca.io/components/metrics_db/&#34;&gt;metrics DB&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Our system can dynamically handle infrastructure changes. There is no need to pre-register metrics before submitting,
&lt;a href=&#34;https://github.com/openstack/monasca-api/blob/master/docs/monasca-api-spec.md#alarm-definitions-and-alarms&#34;&gt;alarm definitions&lt;/a&gt; provide dynamic alarm
creation based on the metrics being received and dimensions in our &lt;a href=&#34;http://monasca.io/components/metrics&#34;&gt;metrics&lt;/a&gt; provide a rich way to identify components and infrastructure.&lt;/li&gt;
&lt;li&gt;Monasca is Multi-tenant and authenticated. Metrics are submitted and authenticated using &lt;a href=&#34;http://docs.openstack.org/developer/keystone/&#34;&gt;Keystone&lt;/a&gt;
and stored associated with a tenant ID. This enables not only Operator monitoring but also Monitoring as a Service use cases.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Monasca agent&lt;/a&gt; is highly extensible with out of the box support for monitoring of many services as well as supporting
existing Nagios checks and statsd metrics.&lt;/li&gt;
&lt;li&gt;Our system is fully open source under the Apache license.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://monasca.io/components/notifications/&#34;&gt;Notifications&lt;/a&gt; can be sent using a variety of methods including email, pagerduty and generic webhooks for integrating
with other systems.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://monasca.io/components/alarms/&#34;&gt;Thresholding on alarming&lt;/a&gt; on metrics is done real-time with compound alarms described using a simple expressive grammar
composed of alarm sub-expressions and logical operators.&lt;/li&gt;
&lt;li&gt;The overall architecture is a &lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;microservices&lt;/a&gt; &lt;a href=&#34;http://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageBus.html&#34;&gt;message bus&lt;/a&gt; architecture that allows for &lt;a href=&#34;http://monasca.io/root/coming-soon&#34;&gt;easy extensibility&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>architecture</title>
      <link>http://monasca.io/root/architecture/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/root/architecture/</guid>
      <description>

&lt;p&gt;Monasca is a highly performant, scalable, fault-tolerant and extensible &lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;microservices&lt;/a&gt; &lt;a href=&#34;http://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageBus.html&#34;&gt;messages bus&lt;/a&gt; based architecture.
It uses a REST API for high-speed metrics processing and querying and has a streaming alarm engine and notification engine.
All of the major components communicate using &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;.
Every component in the system is built with High Availability (HA) in mind and can be scaled either horizontally or vertically to allow for monitoring of very large systems.
&lt;img src=&#34;http://monasca.io/img/architecture/metrics-architecture.png&#34; alt=&#34;Monasca Metrics Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;metrics:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;metrics&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt; is the gateway for all interaction with Monasca. In a typical scenario &lt;a href=&#34;http://monasca.io/components/metrics&#34;&gt;metrics&lt;/a&gt;
are collected by the &lt;a href=&#34;http://monasca.io/components/agent/&#34;&gt;Monasca Agent&lt;/a&gt; running on a system and sent to the Monasca API.
The API then publishes the metrics to the Kafka queue.
From here the &lt;a href=&#34;http://monasca.io/components/persister/&#34;&gt;Monasca Persister&lt;/a&gt; consumes metrics and writes them to our &lt;a href=&#34;http://monasca.io/components/metrics_db/&#34;&gt;Metrics database&lt;/a&gt;.
The &lt;a href=&#34;http://monasca.io/components/alarms/&#34;&gt;Monasca Threshold Engine&lt;/a&gt; also consumes the metrics and uses them to evaluate &lt;a href=&#34;http://monasca.io/components/alarms/&#34;&gt;alarms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point the metrics are in our system and can be be queried using the Monasca API, either directly or through one of our other components, such as the Horizon plugin or the &lt;a href=&#34;http://monasca.io/components/cli&#34;&gt;Monasca CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When the Threshold Engine evaluates the metrics against the alarms it can create alarm state transition events.
These are published back to Kafka and are read by both the persister and &lt;a href=&#34;http://monasca.io/components/notifications/&#34;&gt;Notification Engine&lt;/a&gt;.
The Persister writes the alarm transitions to the DB for future retrieval.
The notification engine will send a notification of the configured type for appropriate state transitions.&lt;/p&gt;

&lt;p&gt;In addition to the components discussed above we also have a configuration database used for storing information such as alarm definitions and notification methods.
This database can be either MySQL or PostgreSQL.&lt;/p&gt;

&lt;h4 id=&#34;complex-event-processing-cep:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;complex event processing (CEP)&lt;/h4&gt;

&lt;p&gt;Support for Complex Event Processing (CEP) is in process.
There are three additional components that will be added for events processing:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;monasca-events-api&lt;/li&gt;
&lt;li&gt;monasca-events-transform&lt;/li&gt;
&lt;li&gt;monasca-events-engine&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/events-architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;log-processing:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;log processing&lt;/h4&gt;

&lt;p&gt;Support for Log processing is in progress and includes the following components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Monasca Log API (monasca-log-api)&lt;/li&gt;
&lt;li&gt;Monasca Log Parser (monasca-log-parser)&lt;/li&gt;
&lt;li&gt;Monasca Log Persister (monasca-log-persister)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/log-architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;combined-architecture:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;combined architecture&lt;/h4&gt;

&lt;p&gt;One of the goals of Monasca is to provide a single unified service for metrics, events and log processing.
The overall combined Monasca architecture can be shown as:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/combined-architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;future-extensions:1bf455b3a3c6e1e40be41ef6023b75eb&#34;&gt;future extensions&lt;/h4&gt;

&lt;p&gt;In addition, to the event and log processing systems a proof-of-concept had been developed for anomaly detection and metrics transform and aggregation engine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://monasca.io/img/architecture/architecture.png&#34; alt=&#34;Monasca Log Architecture&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>dev</title>
      <link>http://monasca.io/root/dev/</link>
      <pubDate>Tue, 18 Aug 2015 17:04:58 -0600</pubDate>
      
      <guid>http://monasca.io/root/dev/</guid>
      <description>

&lt;p&gt;Monasca is an active OpenStack project and welcomes new developers.&lt;/p&gt;

&lt;h4 id=&#34;openstack-community:9ebf8dc1d918e9d82885a54b6ce06af5&#34;&gt;OpenStack Community&lt;/h4&gt;

&lt;p&gt;Monasca was formally accepted as an official OpenStack project in November, 2015 (&lt;a href=&#34;https://review.openstack.org/#/c/213183/&#34;&gt;https://review.openstack.org/#/c/213183/&lt;/a&gt;) and follows the OpenStack
&lt;a href=&#34;https://wiki.openstack.org/wiki/How_To_Contribute&#34;&gt;contribution guidelines&lt;/a&gt; and &lt;a href=&#34;http://docs.openstack.org/developer/hacking/&#34;&gt;code standards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Our project has a &lt;a href=&#34;https://launchpad.net/monasca&#34;&gt;launchpad site&lt;/a&gt; which is used for bug tracking. The project mailing list is also hosted on launchpad,
see the &lt;a href=&#34;https://launchpad.net/~monasca&#34;&gt;team page&lt;/a&gt; for details on that.&lt;/p&gt;

&lt;p&gt;Monasca hosts weekly meetings as well as other venues such as mid-cycle meetups and OpenStack Summits. Details on the team meetings can be found at &lt;a href=&#34;http://eavesdrop.openstack.org/#Monasca_Team_Meeting]&#34;&gt;Monasca Weekly Meeting&lt;/a&gt; and the &lt;a href=&#34;https://wiki.openstack.org/wiki/Meetings/Monasca&#34;&gt;Monasca Wiki&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;code-contributions:9ebf8dc1d918e9d82885a54b6ce06af5&#34;&gt;Code Contributions&lt;/h4&gt;

&lt;p&gt;Monasca is hosted in Github in the OpenStack organization and can be found &lt;a href=&#34;https://github.com/openstack?query=monasca&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All code is submitted via the &lt;a href=&#34;https://review.openstack.org/#/q/status:open+monasca,n,z&#34;&gt;OpenStack Gerrit Review System&lt;/a&gt; and is under gated tests that include a battery of unit and functional tests using the &lt;a href=&#34;https://github.com/openstack/monasca-api/tree/master/devstack&#34;&gt;Monasca DevStack Plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;http://monasca.io/dev/vagrant/&#34;&gt;Monasca Vagrant&lt;/a&gt; environment is the primary setup used for development of Monasca. More information on testing Monasca can be found
at our &lt;a href=&#34;http://monasca.io/dev/testing/&#34;&gt;testing page&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>coming soon</title>
      <link>http://monasca.io/root/coming-soon/</link>
      <pubDate>Fri, 07 Aug 2015 18:32:00 -0600</pubDate>
      
      <guid>http://monasca.io/root/coming-soon/</guid>
      <description>&lt;p&gt;Monasca will be adding support for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Logging: In the style of Loggly, support for an authenticated multi-tenant logging solution is in progress.&lt;/li&gt;
&lt;li&gt;Complex Event Processing:&lt;/li&gt;
&lt;li&gt;Cassandra&lt;/li&gt;
&lt;li&gt;Ceilosca, integration with Ceilometer and Monasca.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>demo</title>
      <link>http://monasca.io/root/demo/</link>
      <pubDate>Wed, 19 Aug 2015 10:17:37 -0600</pubDate>
      
      <guid>http://monasca.io/root/demo/</guid>
      <description>

&lt;p&gt;The primary demo for environment for Monasca is a Docker Image.  To avoid setting all of Monasca up just to investigate it I have created
a &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/monasca/demo/&#34;&gt;demo image&lt;/a&gt; that contains all of the Monasca components.&lt;/p&gt;

&lt;p&gt;This image can be run via &lt;a href=&#34;https://kitematic.com/&#34;&gt;kitematic&lt;/a&gt; or directly in a Docker installation. If running with Docker simply run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -d -p 80:80 -p 8080:8080 -p 5000:5000 --name monasca monasca/demo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the image will download and start. The demo has a keystone user &lt;code&gt;mini-mon&lt;/code&gt; with the password &lt;code&gt;password&lt;/code&gt;. The Monasca horizon plugin is available
on port 80, the &lt;a href=&#34;http://monasca.io/components/api/&#34;&gt;Monasca API&lt;/a&gt; on port 8080 and the embedded keystone on port 5000. Additionally if you shell into the environment
a set of env variables is available at &lt;code&gt;/setup/env.sh&lt;/code&gt; so you can simple source this file and begin using the &lt;a href=&#34;http://monasca.io/components/cli&#34;&gt;Monasca CLI&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;alternatives:33d3cedc2d74629a40b36bf8cf252b87&#34;&gt;Alternatives&lt;/h4&gt;

&lt;p&gt;Besides the Docker demo the Monasca uses a &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; environment for development and this can be used as an alternative
demo environment. It is a bit more involved to setup but works well, more information at the &lt;a href=&#34;http://monasca.io/dev/vagrant/&#34;&gt;development with vagrant page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>